# -*- coding: utf-8 -*-
"""Gender Bias WE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EAQuLw8-ZMw1XdIPE_vjjhmk9nT8qvNo
"""

import random
import numpy as np
from google.colab import drive
drive.mount('/content/gdrive')

import we
from we import WordEmbedding

w2v='/content/gdrive/My Drive/NLP-Project/Gender Debias/w2v_gnews_small.txt'
professions_sample='/content/gdrive/My Drive/NLP-Project/Gender Debias/professions.json'
equalize_sample='/content/gdrive/My Drive/NLP-Project/Gender Debias/equalize_pairs.json'
definitions_sample='/content/gdrive/My Drive/NLP-Project/Gender Debias/definitional_pairs.json'
gender_specific_sample='/content/gdrive/My Drive/NLP-Project/Gender Debias/gender_specific_seed.json'

embed = WordEmbedding(w2v)

pairs = [('she', 'he'), ('her', 'his'), ('woman', 'man'), ('Mary', 'John'), ('herself', 'himself'), ('daughter', 'son'), ('mother', 'father'), ('gal', 'guy'), ('girl', 'boy'), ('female', 'male')]
pair_pca = we.doPCA(pairs, embed)
gender_pca = pair_pca.components_[0]

import json
with open(professions_sample, 'r') as f:
        professions = json.load(f)
print(professions)

profession_val = [p[0] for p in professions]

sorted_gender_pca = sorted([(em.v(w).dot(gender_pca), w) for w in profession_val])

"""In [9]:"""

points = []
names = []

print("***TOP 20 MALE BEFORE DEBIASING***")
for i in range(0,20):
    points.append(sorted_gender_pca[i][0])
    names.append(sorted_gender_pca[i][1])
    print(sorted_gender_pca[i])

print("***TOP 20 FEMALE BEFORE DEBIASING***")
for i in reversed(range(1, 20)):
    points.append(sorted_gender_pca[-i][0])
    names.append(sorted_gender_pca[-i][1])
    print(sorted_gender_pca[-i])

!pip install adjustText

from adjustText import adjust_text
from matplotlib import pyplot as plt

y = np.zeros(len(points))
fig, ax = plt.subplots()
ax.set_title('Biased Professions')
fig.set_size_inches(18, 5)
ax.set_xlim([-.3,.4])
ax.set_xlabel("Gender (He -> She)")
ax.plot(points, y, 'o')
plt.tick_params(axis='y', which='both', direction='inout', labelleft='off')
plt.rcParams.update({'font.size': 14})

texts = []
for x, y, s in zip(points, y, names):
    texts.append(plt.text(x, y, s))

adjust_text(texts)
plt.show()

with open(definitions_sample, "r") as f:
    definitions = json.load(f)

with open(equalize_sample, "r") as f:
    equalize_pairs = json.load(f)
    
with open(gender_specific_sample, "r") as f:
    gender_specific = json.load(f)

print("definitional", len(definitions),definitions)
print("\nequalize_pairs",len(equalize_pairs),equalize_pairs[:10])
print("\ngender specific", len(gender_specific), gender_specific[:10])

def debias(embed, gender_specific, definitions, equalize_pairs):
    em = embed
    gender_direction = we.doPCA(definitions, em).components_[0] #Know gender direction using definitional_sample.json
    specific_set = set(gender_specific)
    for i, w in enumerate(em.words):
        if w not in specific_set:
            em.vecs[i] = we.drop(em.vecs[i], gender_direction) #Neutralize the words 
    em.normalize()
    candidates = {x for e1, e2 in equalize_pairs for x in [(e1.lower(), e2.lower()),
                                                     (e1.title(), e2.title()),
                                                     (e1.upper(), e2.upper())]}
    
    for (a, b) in candidates: #Equalize the words for gender_specific words
        if (a in em.index and b in em.index):
            y = we.drop((em.v(a) + em.v(b)) / 2, gender_direction)
            z = np.sqrt(1 - np.linalg.norm(y)**2)
            if (em.v(a) - em.v(b)).dot(gender_direction) < 0:
                z = -z
            em.vecs[em.index[a]] = z * gender_direction + y
            em.vecs[em.index[b]] = -z * gender_direction + y
    em.normalize()
    return em

embed_debias = debias(embed, gender_specific, definitions, equalize_pairs)

debiased_profs = sorted([(embed_debias.v(w).dot(gender_pca), w) for w in profession_val])

names = []
points = []
print("***TOP 20 MALE After Debiasing***")
for i in range(0,20):
    points.append(debiased_profs[i][0])
    names.append(debiased_profs[i][1])
    print(debiased_profs[i])
print("***TOP 20 FEMALE After Debiasing*** ")
for i in reversed(range(1, 20)):
    points.append(debiased_profs[-i][0])
    names.append(debiased_profs[-i][1])
    print(debiased_profs[-i])

y = np.zeros(len(points))
fig, ax = plt.subplots()
ax.set_title('Debiased Professions', fontsize=16)
fig.set_size_inches(18, 5)
ax.set_xlim([-.3,.4])
ax.set_xlabel("Gender (He -> She)", fontsize=14)
ax.plot(points, y, 'o')
plt.tick_params(axis='y', which='both', direction='inout', labelleft='off')
plt.rcParams.update({'font.size': 14})

texts = []
for x, y, s in zip(points, y, names):
    texts.append(plt.text(x, y, s))

adjust_text(texts)
plt.show()

print(len(debiased_profs))

print("Before and After debiaisng")
check_list=['maestro','paralegal','hairdresser','stylist','architect','librarian','bookkeeper','astronaut','cardiologist','teacher']
for j in range(len(check_list)):
    for i in range(0,len(sorted_gender_pca)):
      if sorted_gender_pca[i][1]==check_list[j]:
        print(sorted_gender_pca[i])
    for i in range(0,len(debiased_profs)):
      if debiased_profs[i][1]==check_list[j]:
        print(debiased_profs[i])
    print("\n")